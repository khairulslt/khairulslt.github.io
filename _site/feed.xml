<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Khairul Slt</title>
    <description>Such theme, very cool.</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Try a New Thing Everyday</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.artofmanliness.com/character/advice/more-footage-take-the-one-month-do-something-new-every-day-challenge/&quot; target=&quot;_blank&quot;&gt;The Art of Manliness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My partner came up with a great suggestion for me to discover the world and build new experiences, the concept was simple but the results are phenomenal. Try one thing new everyday and you will inject your adult life with a little of that which you once had an abundance of in your younger years. There is a great article about it already written by the folks over at The Art of Manliness, you can check the link above.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the activity?&lt;/li&gt;
  	&lt;ol&gt;
  		&lt;li&gt;
  			Check out a new place in Singapore &lt;strong&gt;(Kallang Stadium, I've never been there before, yeah me a local, can you believe that?)&lt;/strong&gt;&lt;br /&gt; Since I decided to go there, I thought, &quot;you know what why not just do a run and do it shirtless?&quot; &lt;strong&gt;(yay go body positivity)&lt;/strong&gt;
		&lt;/li&gt;
		&lt;li&gt;
			Tried Thunder Tea Rice at Laupasat
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;br /&gt;
  &lt;li&gt;Why do you choose this activity and why haven't you done it before?&lt;/li&gt;
  	&lt;ol&gt;
		&lt;li&gt;
  			Kallang Stadium was always near but it was never convenient to go to &lt;strong&gt;(20 minute walk/or by bus)&lt;/strong&gt; and I never had a reason to go there &lt;strong&gt;(the gym already has everything i need)&lt;/strong&gt;&lt;br /&gt;
		&lt;/li&gt;
		&lt;li&gt;
			Not a lot of places sell Thunder Tea Rice, and I was never into healthy food back in the day.
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;br /&gt;
  &lt;li&gt;How does it make you feel?&lt;/li&gt;
	&lt;ol&gt;
		&lt;li&gt;
  			Little bit of adrenaline, got to see the more &quot;polished/touristy&quot; side of Singapore. Caught the sunset which I couldn't enjoy in the moment because I wanted to spend that moment with my partner Olena.&lt;br /&gt;
		&lt;/li&gt;
		&lt;li&gt;
			Definitely felt way better than eating chicken rice but I have to admit it does have a bit of a duller taste compared to the usual local food unfortunately.
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;br /&gt;
  &lt;li&gt;Would you do it again or would you do it with someone?&lt;/li&gt;
  	&lt;ol&gt;
		&lt;li&gt;
  			Alone? For Sure. With my partner Olena? Definitely even more so.&lt;br /&gt;
		&lt;/li&gt;
		&lt;li&gt;
			No, she would kill me and have my balls for breakfast if I brought her to Lau Pa Sat.
		&lt;/li&gt;
	&lt;/ol&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Jul 2023 00:27:31 +0800</pubDate>
        <link>http://localhost:4000/posts/try-a-new-thing-everyday</link>
        <guid isPermaLink="true">http://localhost:4000/posts/try-a-new-thing-everyday</guid>
      </item>
    
      <item>
        <title>Useful Devops Links</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@aidan.hallett/how-to-set-up-a-static-website-with-ssl-tls-and-a-custom-domain-using-aws-s3-and-cloudfront-145be108b431&quot; target=&quot;_blank&quot;&gt;How to setup a Static Website on AWS S3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ably.com/blog/best-practices-for-on-call-processes&quot; target=&quot;_blank&quot;&gt;Best Practices for On-Call Processes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 20 Nov 2021 14:27:31 +0800</pubDate>
        <link>http://localhost:4000/posts/useful-devops-links</link>
        <guid isPermaLink="true">http://localhost:4000/posts/useful-devops-links</guid>
      </item>
    
      <item>
        <title>On Proxies & Load Balancers</title>
        <description>&lt;h2&gt;Proxy (Protects Clients)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
    Proxies act as a shield, as a firewall that keeps all the bad stuff from the internet out of the intranet
&lt;/li&gt;
&lt;li&gt;
    Better management, multiple clients can talk to the same proxy. Proxy helps manage all the requests at one place and then pass it on to the outside world
&lt;/li&gt;
&lt;li&gt;
    Security, prevents phishing attacks
&lt;/li&gt;
&lt;li&gt;
    Performance via caching, say multiple clients are requesting for a static page from a website... once this particular request has been fetched from the server. you can store that static content on the proxy. Rather than going back through the internet and onto that website again, you can just fetch the static content from the proxy, saving bandwidth and improving performance
&lt;/li&gt;
&lt;li&gt;
    Encryption/decryption, when your client makes a request to a website (web server) through a proxy, the proxy hides your IP whether by changing it or decrypting it so the web server doesnt know where you are in the world. It can also encrypt your data so it is unreadable in transit. It also can block access to certain web pages based on IP address.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Reverse Proxy (Protects Servers)&lt;/h2&gt;
&lt;p&gt;
    Whereas deploying a load balancer makes sense only when you have multiple servers, it often makes sense to deploy a reverse proxy even with just one web server or application server. You can think of the reverse proxy as a website’s “public face.” Its address is the one advertised for the website, and it sits at the edge of the site’s network to accept requests from web browsers and mobile apps for the content hosted at the website. The benefits are two-fold:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    Increased security – No information about your backend servers is visible outside your internal network, so malicious clients cannot access them directly to exploit any vulnerabilities. Many reverse proxy servers include features that help protect backend servers from &lt;a href=&quot;https://nginx.com/resources/glossary/what-is-distributed-denial-of-service/&quot; target=&quot;_blank&quot;&gt;distributed denial-of-service&lt;/a&gt; (DDoS) attacks, for example by rejecting traffic from particular client IP addresses (blacklisting), or limiting the number of connections accepted from each client.
&lt;/li&gt;
&lt;li&gt;
    Increased scalability and flexibility – Because clients see only the reverse proxy’s IP address, you are free to change the configuration of your backend infrastructure. This is particularly useful In a load-balanced environment, where you can scale the number of servers up and down to match fluctuations in traffic volume.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    Another reason to deploy a reverse proxy is for &lt;a href=&quot;https://nginx.com/resources/glossary/web-acceleration/&quot; target=&quot;_blank&quot;&gt;web acceleration&lt;/a&gt; – reducing the time it takes to generate a response and return it to the client. Techniques for web acceleration include the following:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    Compression
    – Compressing server responses before returning them to the client (for instance, with &quot;&lt;code&gt;gzip&lt;/code&gt;&quot;) reduces the amount of bandwidth they require, which speeds their transit over the network.
&lt;/li&gt;
&lt;li&gt;
    &lt;a href=&quot;https://www.nginx.com/resources/admin-guide/nginx-ssl-termination/&quot; target=&quot;_blank&quot;&gt;SSL termination&lt;/a&gt;
    – Encrypting the traffic between clients and servers protects it as it crosses a public network like the Internet. But decryption and encryption can be computationally expensive. By decrypting incoming requests and encrypting server responses, the reverse proxy frees up resources on backend servers which they can then devote to their main purpose, serving content.
&lt;/li&gt;
&lt;li&gt;
    &lt;a href=&quot;https://www.nginx.com/products/content-caching-nginx-plus/&quot; target=&quot;_blank&quot;&gt;Caching&lt;/a&gt;
    – Before returning the backend server’s response to the client, the reverse proxy stores a copy of it locally. When the client (or any client) makes the same request, the reverse proxy can provide the response itself from the cache instead of forwarding the request to the backend server. This both decreases response time to the client and reduces the load on the backend server.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; Taken from the &lt;a href=&quot;https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/&quot; target=&quot;_blank&quot;&gt;Nginx&lt;/a&gt; website&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Mar 2021 08:27:31 +0800</pubDate>
        <link>http://localhost:4000/posts/proxies-load-balancer</link>
        <guid isPermaLink="true">http://localhost:4000/posts/proxies-load-balancer</guid>
      </item>
    
      <item>
        <title>Dibs On Docker!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23735149/what-is-the-difference-between-a-docker-image-and-a-container?rq=1&quot; target=&quot;_blank&quot;&gt;Dockerfile vs Image vs Container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: Know your cakes&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Oct 2019 18:21:11 +0800</pubDate>
        <link>http://localhost:4000/posts/dibs-on-docker</link>
        <guid isPermaLink="true">http://localhost:4000/posts/dibs-on-docker</guid>
      </item>
    
      <item>
        <title>An introduction to Django's ORM</title>
        <description>&lt;p&gt;At the start of 2019 I started working with &lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot;&gt;Django&lt;/a&gt;, a Python Web framework.&lt;/p&gt;

&lt;p&gt;The nice thing about Django is that it comes with its own Object-Relational-Mapper (ORM) - meaning that you get to interact with your database in a nice Pythonical way instead of writing SQL queries. In short, its perfect for someone newer (like me) to learn the in’s-and-out’s of interacting with your database.&lt;/p&gt;

&lt;p&gt;Let’s look at a small example on creating an SQL Table called &lt;strong&gt;“Person”&lt;/strong&gt; which will have two rows for its first and last name respectively.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Initializing an SQL database (without Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt; CREATE TABLE myapp_person (
   &quot;id&quot; serial NOT NULL PRIMARY KEY,
   &quot;first_name&quot; varchar(30) NOT NULL,
   &quot;last_name&quot; varchar(30) NOT NULL
 );
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Assuming a basic SQLite3 database, your code would probably look something like the above.
Seems lengthy? Yikes! Now, let’s take a look at achieving something similar using the Django ORM instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Initializing an SQL database (with Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Much, much cleaner. As for more technical specifics, a CharField is defined as a string field that we can use to define the rows in our database (should it accept a string/integer/boolean? etcetc.) You can configure it according to your needs. 
&lt;br /&gt;&lt;br /&gt;Additionally, if you’re wondering where the &lt;strong&gt; id &lt;/strong&gt;field went, Django automatically adds it for you! Check out the docs on &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/models/fields/#field-types&quot; target=&quot;_blank&quot;&gt;different field types&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://docs.djangoproject.com/en/2.2/topics/db/models/#automatic-primary-key-fields&quot; target=&quot;_blank&quot;&gt;automatic primary key fields&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we’re happy with this database we’ve created, let’s take a look at how we would access it with another SQL vs ORM example! The following code selects all the fields available in our &lt;strong&gt;Person&lt;/strong&gt; table.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Database querying (without Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt; SELECT * FROM myapp_person;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Database querying (with Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;all_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;Since we’ve gotten the non-exciting examples out of the way, let’s take a look at some possible code we would actually use in jobs that we get paid for.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Get object by ID (without Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt; SELECT * FROM Person WHERE id = {}.format(id)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;Get object by ID (with Django ORM)&lt;/u&gt;&lt;/strong&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Bonus points if you spot the SQL injection error above :ghost:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I try and follow as much discussion as I can online about the disadvantages of using Django’s ORM (unable to perform complex SQL queries, an ORM will never be an effective representation of the underlying data model, etcetc.)&lt;/p&gt;

&lt;p&gt;But for the most part, either I’m fortunate (or some might argue, unfortunate) that I haven’t come across any of the problems above in my daily work. So far, I haven’t found anything that I haven’t been able to achieve with this giant monolith.&lt;/p&gt;

&lt;p&gt;If you’re interested in my opinion, I subscribe to &lt;a href=&quot;https://coffeeonthekeyboard.com/why-django-sucks-except-when-it-doesnt-664/&quot; target=&quot;_blank&quot;&gt;Why Django Sucks, Except When It Doesn’t&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: While you’re arguing about what works and what doesn’t, someone already shipped the next Facebook with PHP&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Apr 2019 23:27:31 +0800</pubDate>
        <link>http://localhost:4000/posts/introduction-django-ORM</link>
        <guid isPermaLink="true">http://localhost:4000/posts/introduction-django-ORM</guid>
      </item>
    
  </channel>
</rss>
